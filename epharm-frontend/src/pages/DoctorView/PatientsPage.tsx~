import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import DashboardLayout from '@/components/Layout/DoctorComponents/DashboardLayout';
import { fetchPatients } from '@/api/patient';
import { fetchPrescriptionsByPatient } from '@/api/prescription';
import {
    Search, Filter, Plus, FileText, QrCode
} from 'lucide-react';
import {
    Input, Button, Card, CardContent, Badge,
    Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
    Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
    Dialog, DialogContent, DialogDescription, DialogFooter,
    DialogHeader, DialogTitle, Label
} from '@/components/ui';

const PatientsPage = () => {
    const navigate = useNavigate();
    const [patients, setPatients] = useState<any[]>([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [filterGender, setFilterGender] = useState('all');
    const [selectedPatient, setSelectedPatient] = useState<string | null>(null);
    const [patientPrescriptions, setPatientPrescriptions] = useState<Record<string, any[]>>({});
    const [isPrescriptionHistoryOpen, setIsPrescriptionHistoryOpen] = useState(false);
    const [isSearchPatientOpen, setIsSearchPatientOpen] = useState(false);
    const [searchPatientId, setSearchPatientId] = useState('');
    const [isQrScannerOpen, setIsQrScannerOpen] = useState(false);

    useEffect(() => {
        const loadPatients = async () => {
            try {
                const data = await fetchPatients();
                setPatients(data);
            } catch (err) {
                console.error('Failed to fetch patients', err);
            }
        };
        loadPatients();
    }, []);

    const filteredPatients = patients.filter(patient => {
        const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            patient.patient_id?.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesGender = filterGender === 'all' || patient.gender.toLowerCase() === filterGender.toLowerCase();
        return matchesSearch && matchesGender;
    });

    const calculateAge = (birthdate: string) => {
        const today = new Date();
        const birthDate = new Date(birthdate);
        let age = today.getFullYear() - birthDate.getFullYear();
        const m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) age--;
        return age;
    };

    const viewPatientHistory = async (patientId: string) => {
        try {
            const prescriptions = await fetchPrescriptionsByPatient(patientId);
            setPatientPrescriptions(prev => ({ ...prev, [patientId]: prescriptions }));
            setSelectedPatient(patientId);
            setIsPrescriptionHistoryOpen(true);
        } catch (err) {
            console.error('Failed to fetch prescription history', err);
        }
    };

    const handleScanComplete = (patientId: string) => {
        setSearchPatientId(patientId);
        setIsQrScannerOpen(false);
    };

    return (
        <DashboardLayout>
            <div className="space-y-6">
                <div className="flex justify-between items-center">
                    <div>
                        <h1 className="text-2xl font-bold">My Patients</h1>
                        <p className="text-muted-foreground">Manage and view your patients</p>
                    </div>
                    <Button onClick={() => setIsSearchPatientOpen(true)}>
                        <Plus className="mr-2 h-4 w-4" /> Add Patient
                    </Button>
                </div>

                <div className="flex flex-col md:flex-row gap-4">
                    <div className="relative flex-1">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                        <Input
                            placeholder="Search patients by name or ID..."
                            className="pl-10"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </div>
                    <div className="flex gap-2">
                        <div className="w-[180px]">
                            <Select value={filterGender} onValueChange={setFilterGender}>
                                <SelectTrigger>
                                    <div className="flex items-center">
                                        <Filter className="mr-2 h-4 w-4" />
                                        <SelectValue placeholder="Gender" />
                                    </div>
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">All Genders</SelectItem>
                                    <SelectItem value="male">Male</SelectItem>
                                    <SelectItem value="female">Female</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                </div>

                <Card>
                    <CardContent className="p-0">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Patient</TableHead>
                                    <TableHead>Patient ID</TableHead>
                                    <TableHead>Gender</TableHead>
                                    <TableHead>Birthdate</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {filteredPatients.map((patient) => (
                                    <TableRow key={patient.id}>
                                        <TableCell className="font-medium">{patient.name}</TableCell>
                                        <TableCell>{patient.patient_id}</TableCell>
                                        <TableCell>{patient.gender}</TableCell>
                                        <TableCell>{new Date(patient.birthdate).toLocaleDateString()}</TableCell>
                                        <TableCell className="text-right">
                                            <div className="flex justify-end gap-2">
                                                <Button size="sm" variant="outline" onClick={() => viewPatientHistory(patient.id)}>View History</Button>
                                                <Button size="sm" onClick={() => navigate(`/prescriptions/create?patientId=${patient.id}`)}>
                                                    <FileText className="mr-1 h-4 w-4" /> Prescribe
                                                </Button>
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            </div>

            <Dialog open={isPrescriptionHistoryOpen} onOpenChange={setIsPrescriptionHistoryOpen}>
                <DialogContent className="sm:max-w-4xl max-h-[80vh] overflow-y-auto">
                    <DialogHeader>
                        <DialogTitle>
                            {selectedPatient && patients.find(p => p.id === selectedPatient)?.name}'s Prescription History
                        </DialogTitle>
                        <DialogDescription>
                            Complete history of prescriptions for this patient
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-6 py-4">
                        {selectedPatient && patientPrescriptions[selectedPatient]?.length > 0 ? (
                            patientPrescriptions[selectedPatient].map(prescription => (
                                <Card key={prescription.id} className="border-l-4 border-l-blue-500">
                                    <CardContent className="p-4">
                                        <div className="flex justify-between mb-4">
                                            <div>
                                                <h3 className="font-medium text-lg">{prescription.diagnosis}</h3>
                                                <p className="text-sm text-muted-foreground">
                                                    {prescription.doctor} â€¢ {new Date(prescription.date).toLocaleDateString()}
                                                </p>
                                            </div>
                                            <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100">
                                                {prescription.medications.length} medications
                                            </Badge>
                                        </div>
                                        <div className="mt-4">
                                            <h4 className="text-sm font-medium text-gray-500 mb-2">Medications</h4>
                                            <Table>
                                                <TableHeader>
                                                    <TableRow>
                                                        <TableHead>Medication</TableHead>
                                                        <TableHead>Dosage</TableHead>
                                                        <TableHead>Frequency</TableHead>
                                                        <TableHead>Duration</TableHead>
                                                    </TableRow>
                                                </TableHeader>
                                                <TableBody>
                                                    {prescription.medications.map((med, idx) => (
                                                        <TableRow key={idx}>
                                                            <TableCell>{med.name}</TableCell>
                                                            <TableCell>{med.dosage}</TableCell>
                                                            <TableCell>{med.frequency}</TableCell>
                                                            <TableCell>{med.duration}</TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        </div>
                                    </CardContent>
                                </Card>
                            ))
                        ) : (
                            <div className="text-center p-6 text-muted-foreground">
                                No prescription history found for this patient.
                            </div>
                        )}
                    </div>
                    <DialogFooter>
                        <Button onClick={() => setIsPrescriptionHistoryOpen(false)}>Close</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </DashboardLayout>
    );
};

export default PatientsPage;
